<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Edit these variables to customize the look of your inventory.

EDIT_ME()

row = 0
column = 0
selected = 0 
slots_in_row -= 1

hold = 0 //Used for inventory. The item id of what you are holding on your mouse
select1 = 0 //The first slot you select
select2 = 0 //The second slot you select
selectid1 = 0 //The item id in the first slot
selectid2 = 0 //The item id in the second slot
mousedover = 0 //The item id of the sprite drawn on your mouse


//Create Inventory Slots

p = 1
while p &lt; total_slots {
    inv[p]=0;
    p++;
}
inv[p++]=0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if show_inventory = true {
    x_mouse = device_mouse_x_to_gui(0); //Determine where the mouse is on the view.
    y_mouse = device_mouse_y_to_gui(0);
    
    if (y_mouse &gt; inventory_y and y_mouse &lt; inventory_y+ceil(total_slots/slots_in_row)*slot_size) and //Are you mousing in the inventory?
        (x_mouse &gt; inventory_x and x_mouse &lt; inventory_x+(slots_in_row+1)*slot_size) {
        row = ceil((y_mouse-inventory_y)/slot_size)
        column = ceil((x_mouse-inventory_x)/slot_size)
        hover = true
    }
    else {
        hover = false
    }
    
    if hover = true { //Which slot are you selecting?
        selected = column+((row-1)*(slots_in_row+1))
        if selected &gt; total_slots selected = 0
    }
    else {
        selected = 0
    }
    
    if selected != 0 { //Are you mousing over the inventory? 
        if mouse_check_button_pressed(mb_left) { //Select the first item.
            select1 = selected 
            selectid1 = inv[select1]
            }
            
        if mouse_check_button_released(mb_left) { //Select the second item.
            select2 = selected
            selectid2 = inv[select2]
            if select1 != select2 &amp;&amp; select1 != 0 { //Are the items switching slots?
                hold = selectid1
                selectid1 = selectid2
                selectid2 = hold
                inv[select1] = selectid1 //Switch them.
                inv[select2] = selectid2
                select1 = 0
                select2 = 0
                selectid1 = 0
                selectid2 = 0
                hold = 0
            }
            else {
                item = inv[selected]
                inv_item_action_left() //Do the left click action.
                select1 = 0
                select2 = 0
                selectid1 = 0
                selectid2 = 0
                hold = 0
            }
        }
        if mouse_check_button_released(mb_right) { //Do the right click action.
            item = inv[selected]
            inv_item_action_right()
            select1 = 0
            select2 = 0
            selectid1 = 0
            selectid2 = 0
            hold = 0
            }     
    }
    else {
        if mouse_check_button_released(mb_left) { //Drop the item.
            inv_drop_item(inv[select1])
            inv[select1] = 0
            select1 = 0
            select2 = 0
            selectid1 = 0
            selectid2 = 0
        }
    }
}









</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if show_inventory = true {
    ss = 1
    xx = 0
    yy = 0
    while (ss &lt;= total_slots) { //Draw the background slots.
        if (xx &lt;= slots_in_row) {
            if selected = ss {
                draw_sprite(slot_selected,0,xx*slot_size+inventory_x,yy*slot_size+inventory_y)
                }
            else {
                draw_sprite(slot_sprite,0,xx*slot_size+inventory_x,yy*slot_size+inventory_y)
                }
            xx+=1;
            ss+=1;
        }
        else {
            yy+=1;
            xx=0;
        }
    } 
    
    ss = 1
    xx = 0
    yy = 0
    while (ss &lt;= total_slots) { //Draw the item icons.
        if (xx &lt;= slots_in_row) {
            if select1 != ss {
                draw_sprite(sprite[inv[ss]],0,xx*slot_size+inventory_x,yy*slot_size+inventory_y)
            }
            xx+=1;
            ss+=1;
        }
        else {
            yy+=1;
            xx=0;
        }
    } 
    
    ss = 1
    xx = 0
    yy = 0
    while (ss &lt;= total_slots) { //Draw the item on your mouse.
        if (xx &lt;= slots_in_row) {
            if select1 = ss {
                draw_sprite(sprite[inv[ss]],0,mouse_x-slot_size/2,mouse_y-slot_size/2)
            }
            xx+=1;
            ss+=1;
        }
        else {
            yy+=1;
            xx=0;
        }
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
